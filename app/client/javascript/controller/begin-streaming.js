'use strict';

function beginStreaming(channel) {

  var constraints = {
    audio: false,
    video: {
      facingMode: 'user',
      width: {
        exact: 48
        // exact: 240
      },
      height: {
        exact: 35
        // exact: 135
      }
    }
  };

  var config = {
    fps: 15 // do not exceed fps of camera
  };

  startVideo(constraints).then(function (video) {
    var videoContext = createContextFromVideo(video);
    var previousContext = createContextFromVideo(video);
    var processingContext = createContextFromVideo(video);

    var processingCanvas = processingContext.canvas;
    video.className += 'video';
    processingCanvas.className += 'video';

    document.body.appendChild(video);
    document.body.appendChild(processingContext.canvas);

    resetContexts();

    window.setInterval(function () {
      // videoContext holds the current video frame
      // processingContext holds the previous video frame
      // figure out a way to skip the first frame?

      resetContexts();
      run(videoContext, previousContext, processingContext);
    }, 1000 / config.fps);

    // clean up this mess
    var circleRadius = videoContext.canvas.width / 25;
    var oldCoords = { x: 0, y: 0 };
    var width = videoContext.canvas.width;
    var height = videoContext.canvas.height;
    processingContext.fillStyle = "green";

    function run(currentContext, previousContext, processingContext) {
      frameDifference(currentContext, previousContext, processingContext);
      var coords = getCoordinates(processingContext, 'x', 'y');

      if (coords) {
        processingContext.beginPath();
        processingContext.arc(coords.x * width, coords.y * height, circleRadius, 0, 2 * Math.PI);
        processingContext.fill();

        oldCoords = coords;
      } else {
        processingContext.fillStyle = "red";
        processingContext.beginPath();
        processingContext.arc(oldCoords.x * width, oldCoords.y * height, circleRadius, 0, 2 * Math.PI);
        processingContext.fill();
        processingContext.fillStyle = "green";
      }

      channel.send(JSON.stringify(coords));
    }

    function resetContexts() {
      previousContext.drawImage(videoContext.canvas, 0, 0); // copy old frame
      copyVideoToContext(videoContext, video); // update current frame
      // processingContext.clearRect(0, 0, processingCanvas.width, processingCanvas.height); // clear processing context
      // careful: processing context might flicker
    }
  });

  function createContextFromVideo(video) {
    var canvas = document.createElement('canvas');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    return canvas.getContext('2d');
  }

  function copyVideoToContext(context, video) {
    context.drawImage(video, 0, 0, context.canvas.width, context.canvas.height);
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImphdmFzY3JpcHQvY29udHJvbGxlci9iZWdpbi1zdHJlYW1pbmcuanMiXSwibmFtZXMiOlsiYmVnaW5TdHJlYW1pbmciLCJjaGFubmVsIiwiY29uc3RyYWludHMiLCJhdWRpbyIsInZpZGVvIiwiZmFjaW5nTW9kZSIsIndpZHRoIiwiZXhhY3QiLCJoZWlnaHQiLCJjb25maWciLCJmcHMiLCJzdGFydFZpZGVvIiwidGhlbiIsInZpZGVvQ29udGV4dCIsImNyZWF0ZUNvbnRleHRGcm9tVmlkZW8iLCJwcmV2aW91c0NvbnRleHQiLCJwcm9jZXNzaW5nQ29udGV4dCIsInByb2Nlc3NpbmdDYW52YXMiLCJjYW52YXMiLCJjbGFzc05hbWUiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInJlc2V0Q29udGV4dHMiLCJ3aW5kb3ciLCJzZXRJbnRlcnZhbCIsInJ1biIsImNpcmNsZVJhZGl1cyIsIm9sZENvb3JkcyIsIngiLCJ5IiwiZmlsbFN0eWxlIiwiY3VycmVudENvbnRleHQiLCJmcmFtZURpZmZlcmVuY2UiLCJjb29yZHMiLCJnZXRDb29yZGluYXRlcyIsImJlZ2luUGF0aCIsImFyYyIsIk1hdGgiLCJQSSIsImZpbGwiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsImRyYXdJbWFnZSIsImNvcHlWaWRlb1RvQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJnZXRDb250ZXh0IiwiY29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxjQUFULENBQXdCQyxPQUF4QixFQUFpQzs7QUFFL0IsTUFBSUMsY0FBYztBQUNoQkMsV0FBTyxLQURTO0FBRWhCQyxXQUFPO0FBQ0xDLGtCQUFZLE1BRFA7QUFFTEMsYUFBTztBQUNMQyxlQUFPO0FBQ1A7QUFGSyxPQUZGO0FBTUxDLGNBQVE7QUFDTkQsZUFBTztBQUNQO0FBRk07QUFOSDtBQUZTLEdBQWxCOztBQWVBLE1BQUlFLFNBQVM7QUFDWEMsU0FBSyxF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QU85QixPQUFPK0IsVUFBUCxDQUFrQixJQUFsQixDQUFQO0FBQ0Q7O0FBRUQsV0FBU0osa0JBQVQsQ0FBNEJLLE9BQTVCLEVBQXFDOUMsS0FBckMsRUFBNEM7QUFDMUM4QyxZQUFRTixTQUFSLENBQWtCeEMsS0FBbEIsRUFBeUIsQ0FBekIsRUFBNEIsQ0FBNUIsRUFBK0I4QyxRQUFRaEMsTUFBUixDQUFlWixLQUE5QyxFQUFxRDRDLFFBQVFoQyxNQUFSLENBQWVWLE1BQXBFO0FBQ0Q7QUFDRiIsImZpbGUiOiJqYXZhc2NyaXB0L2NvbnRyb2xsZXIvYmVnaW4tc3RyZWFtaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYmVnaW5TdHJlYW1pbmcoY2hhbm5lbCkge1xuXG4gIGxldCBjb25zdHJhaW50cyA9IHtcbiAgICBhdWRpbzogZmFsc2UsXG4gICAgdmlkZW86IHtcbiAgICAgIGZhY2luZ01vZGU6ICd1c2VyJyxcbiAgICAgIHdpZHRoOiB7XG4gICAgICAgIGV4YWN0OiA0OFxuICAgICAgICAvLyBleGFjdDogMjQwXG4gICAgICB9LFxuICAgICAgaGVpZ2h0OiB7XG4gICAgICAgIGV4YWN0OiAzNVxuICAgICAgICAvLyBleGFjdDogMTM1XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGxldCBjb25maWcgPSB7XG4gICAgZnBzOiAxNSAvLyBkbyBub3QgZXhjZWVkIGZwcyBvZiBjYW1lcmFcbiAgfTtcblxuICBzdGFydFZpZGVvKGNvbnN0cmFpbnRzKS50aGVuKCh2aWRlbykgPT4ge1xuICAgIGxldCB2aWRlb0NvbnRleHQgPSBjcmVhdGVDb250ZXh0RnJvbVZpZGVvKHZpZGVvKTtcbiAgICBsZXQgcHJldmlvdXNDb250ZXh0ID0gY3JlYXRlQ29udGV4dEZyb21WaWRlbyh2aWRlbyk7XG4gICAgbGV0IHByb2Nlc3NpbmdDb250ZXh0ID0gY3JlYXRlQ29udGV4dEZyb21WaWRlbyh2aWRlbyk7XG5cbiAgICBsZXQgcHJvY2Vzc2luZ0NhbnZhcyA9IHByb2Nlc3NpbmdDb250ZXh0LmNhbnZhcztcbiAgICB2aWRlby5jbGFzc05hbWUgKz0gJ3ZpZGVvJztcbiAgICBwcm9jZXNzaW5nQ2FudmFzLmNsYXNzTmFtZSArPSAndmlkZW8nO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh2aWRlbyk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwcm9jZXNzaW5nQ29udGV4dC5jYW52YXMpO1xuXG4gICAgcmVzZXRDb250ZXh0cygpO1xuXG4gICAgd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgIC8vIHZpZGVvQ29udGV4dCBob2xkcyB0aGUgY3VycmVudCB2aWRlbyBmcmFtZVxuICAgICAgLy8gcHJvY2Vzc2luZ0NvbnRleHQgaG9sZHMgdGhlIHByZXZpb3VzIHZpZGVvIGZyYW1lXG4gICAgICAvLyBmaWd1cmUgb3V0IGEgd2F5IHRvIHNraXAgdGhlIGZpcnN0IGZyYW1lP1xuXG4gICAgICByZXNldENvbnRleHRzKCk7XG4gICAgICBydW4odmlkZW9Db250ZXh0LCBwcmV2aW91c0NvbnRleHQsIHByb2Nlc3NpbmdDb250ZXh0KTtcblxuICAgIH0sIDEwMDAgLyBjb25maWcuZnBzKTtcblxuICAgIC8vIGNsZWFuIHVwIHRoaXMgbWVzc1xuICAgIGxldCBjaXJjbGVSYWRpdXMgPSB2aWRlb0NvbnRleHQuY2FudmFzLndpZHRoIC8gMjU7XG4gICAgbGV0IG9sZENvb3JkcyA9IHt4OiAwLCB5OiAwfTtcbiAgICBsZXQgd2lkdGggPSB2aWRlb0NvbnRleHQuY2FudmFzLndpZHRoO1xuICAgIGxldCBoZWlnaHQgPSB2aWRlb0NvbnRleHQuY2FudmFzLmhlaWdodDtcbiAgICBwcm9jZXNzaW5nQ29udGV4dC5maWxsU3R5bGUgPSBcImdyZWVuXCI7XG5cbiAgICBmdW5jdGlvbiBydW4oY3VycmVudENvbnRleHQsIHByZXZpb3VzQ29udGV4dCwgcHJvY2Vzc2luZ0NvbnRleHQpIHtcbiAgICAgIGZyYW1lRGlmZmVyZW5jZShjdXJyZW50Q29udGV4dCwgcHJldmlvdXNDb250ZXh0LCBwcm9jZXNzaW5nQ29udGV4dCk7XG4gICAgICBsZXQgY29vcmRzID0gZ2V0Q29vcmRpbmF0ZXMocHJvY2Vzc2luZ0NvbnRleHQsICd4JywgJ3knKTtcblxuICAgICAgaWYgKGNvb3Jkcykge1xuICAgICAgICBwcm9jZXNzaW5nQ29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgcHJvY2Vzc2luZ0NvbnRleHQuYXJjKGNvb3Jkcy54ICogd2lkdGgsIGNvb3Jkcy55ICogaGVpZ2h0LCBjaXJjbGVSYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgcHJvY2Vzc2luZ0NvbnRleHQuZmlsbCgpO1xuXG4gICAgICAgIG9sZENvb3JkcyA9IGNvb3JkcztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBwcm9jZXNzaW5nQ29udGV4dC5maWxsU3R5bGUgPSBcInJlZFwiO1xuICAgICAgICBwcm9jZXNzaW5nQ29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgcHJvY2Vzc2luZ0NvbnRleHQuYXJjKG9sZENvb3Jkcy54ICogd2lkdGgsIG9sZENvb3Jkcy55ICogaGVpZ2h0LCBjaXJjbGVSYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgcHJvY2Vzc2luZ0NvbnRleHQuZmlsbCgpO1xuICAgICAgICBwcm9jZXNzaW5nQ29udGV4dC5maWxsU3R5bGUgPSBcImdyZWVuXCI7XG4gICAgICB9XG5cbiAgICAgIGNoYW5uZWwuc2VuZChKU09OLnN0cmluZ2lmeShjb29yZHMpKTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0Q29udGV4dHMoKSB7XG4gICAgICBwcmV2aW91c0NvbnRleHQuZHJhd0ltYWdlKHZpZGVvQ29udGV4dC5jYW52YXMsIDAsIDApOyAvLyBjb3B5IG9sZCBmcmFtZVxuICAgICAgY29weVZpZGVvVG9Db250ZXh0KHZpZGVvQ29udGV4dCwgdmlkZW8pOyAvLyB1cGRhdGUgY3VycmVudCBmcmFtZVxuICAgICAgLy8gcHJvY2Vzc2luZ0NvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHByb2Nlc3NpbmdDYW52YXMud2lkdGgsIHByb2Nlc3NpbmdDYW52YXMuaGVpZ2h0KTsgLy8gY2xlYXIgcHJvY2Vzc2luZyBjb250ZXh0XG4gICAgICAvLyBjYXJlZnVsOiBwcm9jZXNzaW5nIGNvbnRleHQgbWlnaHQgZmxpY2tlclxuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29udGV4dEZyb21WaWRlbyh2aWRlbykge1xuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSB2aWRlby52aWRlb1dpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB2aWRlby52aWRlb0hlaWdodDtcbiAgICByZXR1cm4gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb3B5VmlkZW9Ub0NvbnRleHQoY29udGV4dCwgdmlkZW8pIHtcbiAgICBjb250ZXh0LmRyYXdJbWFnZSh2aWRlbywgMCwgMCwgY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodCk7XG4gIH1cbn1cbiJdfQ==
