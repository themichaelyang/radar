"use strict";

// should be set via config
window.magic = 0.05;

// takes in contexts
function frameDifference(current, previous, processing) {
  var currentCanvas = current.canvas;
  var width = currentCanvas.width;
  var height = currentCanvas.height;

  var currentImageData = current.getImageData(0, 0, width, height);
  var previousImageData = previous.getImageData(0, 0, width, height);

  var processingImageData = current.getImageData(0, 0, width, height);

  var currentPixel = {};
  var previousPixel = {};

  for (var i = 0; i < currentImageData.data.length; i += 4) {
    currentPixel.r = currentImageData.data[i];
    currentPixel.g = currentImageData.data[i + 1];
    currentPixel.b = currentImageData.data[i + 2];

    previousPixel.r = previousImageData.data[i];
    previousPixel.g = previousImageData.data[i + 1];
    previousPixel.b = previousImageData.data[i + 2];

    var distance = colorDistance(currentPixel, previousPixel);
    if (distance > window.magic) {
      setImageDataPixel(i, processingImageData, 0, 0, 0, 255);
    } else {
      setImageDataPixel(i, processingImageData, 255, 255, 255, 255);
    }
  }

  processing.putImageData(processingImageData, 0, 0);
}

function setImageDataPixel(index, imageData, r, g, b, a) {
  imageData.data[index] = r;
  imageData.data[index + 1] = g;
  imageData.data[index + 2] = b;
  imageData.data[index + 3] = a;
}

// returns value from 0 - 1
function colorDistance(p1, p2) {
  return Math.sqrt(Math.pow(p1.r - p2.r, 2) + Math.pow(p1.g - p2.g, 2) + Math.pow(p1.b - p2.b, 2)) / 441.673;
}

function indexToCoordinate(index, width) {
  var x = index % width;
  var y = (index - x) / width;
  return {
    x: x,
    y: y
  };
}

function coordinateToIndex(x, y, width) {
  return y * width + x;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImphdmFzY3JpcHQvY29udHJvbGxlci9mcmFtZS1kaWZmZXJlbmNlLmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsIm1hZ2ljIiwiZnJhbWVEaWZmZXJlbmNlIiwiY3VycmVudCIsInByZXZpb3VzIiwicHJvY2Vzc2luZyIsImN1cnJlbnRDYW52YXMiLCJjYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsImN1cnJlbnRJbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJwcmV2aW91c0ltYWdlRGF0YSIsInByb2Nlc3NpbmdJbWFnZURhdGEiLCJjdXJyZW50UGl4ZWwiLCJwcmV2aW91c1BpeGVsIiwiaSIsImRhdGEiLCJsZW5ndGgiLCJyIiwiZyIsImIiLCJkaXN0YW5jZSIsImNvbG9yRGlzdGFuY2UiLCJzZXRJbWFnZURhdGFQaXhlbCIsInB1dEltYWdlRGF0YSIsImluZGV4IiwiaW1hZ2VEYXRhIiwiYSIsInAxIiwicDIiLCJNYXRoIiwic3FydCIsInBvdyIsImluZGV4VG9Db29yZGluYXRlIiwieCIsInkiLCJjb29yZGluYXRlVG9JbmRleCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBQSxPQUFPQyxLQUFQLEdBQWUsSUFBZjs7QUFFQTtBQUNBLFNBQVNDLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDQyxRQUFsQyxFQUE0Q0MsVUFBNUMsRUFBd0Q7QUFDdEQsTUFBSUMsZ0JBQWdCSCxRQUFRSSxNQUE1QjtBQUNBLE1BQUlDLFFBQVFGLGNBQWNFLEtBQTFCO0FBQ0EsTUFBSUMsU0FBU0gsY0FBY0csTUFBM0I7O0FBRUEsTUFBSUMsbUJBQW1CUCxRQUFRUSxZQUFSLENBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCSCxLQUEzQixFQUFrQ0MsTUFBbEMsQ0FBdkI7QUFDQSxNQUFJRyxvQkFBb0JSLFNBQVNPLFlBQVQsQ0FBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEJILEtBQTVCLEVBQW1DQyxNQUFuQyxDQUF4Qjs7QUFFQSxNQUFJSSxzQkFBc0JWLFFBQVFRLFlBQVIs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dC9jb250cm9sbGVyL2ZyYW1lLWRpZmZlcmVuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzaG91bGQgYmUgc2V0IHZpYSBjb25maWdcbndpbmRvdy5tYWdpYyA9IDAuMDU7XG5cbi8vIHRha2VzIGluIGNvbnRleHRzXG5mdW5jdGlvbiBmcmFtZURpZmZlcmVuY2UoY3VycmVudCwgcHJldmlvdXMsIHByb2Nlc3NpbmcpIHtcbiAgbGV0IGN1cnJlbnRDYW52YXMgPSBjdXJyZW50LmNhbnZhcztcbiAgbGV0IHdpZHRoID0gY3VycmVudENhbnZhcy53aWR0aDtcbiAgbGV0IGhlaWdodCA9IGN1cnJlbnRDYW52YXMuaGVpZ2h0O1xuXG4gIGxldCBjdXJyZW50SW1hZ2VEYXRhID0gY3VycmVudC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gIGxldCBwcmV2aW91c0ltYWdlRGF0YSA9IHByZXZpb3VzLmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcblxuICBsZXQgcHJvY2Vzc2luZ0ltYWdlRGF0YSA9IGN1cnJlbnQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuXG4gIGxldCBjdXJyZW50UGl4ZWwgPSB7fTtcbiAgbGV0IHByZXZpb3VzUGl4ZWwgPSB7fTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRJbWFnZURhdGEuZGF0YS5sZW5ndGg7IGkgKz0gNCkge1xuICAgIGN1cnJlbnRQaXhlbC5yID0gY3VycmVudEltYWdlRGF0YS5kYXRhW2ldO1xuICAgIGN1cnJlbnRQaXhlbC5nID0gY3VycmVudEltYWdlRGF0YS5kYXRhW2krMV07XG4gICAgY3VycmVudFBpeGVsLmIgPSBjdXJyZW50SW1hZ2VEYXRhLmRhdGFbaSsyXTtcblxuICAgIHByZXZpb3VzUGl4ZWwuciA9IHByZXZpb3VzSW1hZ2VEYXRhLmRhdGFbaV07XG4gICAgcHJldmlvdXNQaXhlbC5nID0gcHJldmlvdXNJbWFnZURhdGEuZGF0YVtpKzFdO1xuICAgIHByZXZpb3VzUGl4ZWwuYiA9IHByZXZpb3VzSW1hZ2VEYXRhLmRhdGFbaSsyXTtcblxuICAgIGxldCBkaXN0YW5jZSA9IGNvbG9yRGlzdGFuY2UoY3VycmVudFBpeGVsLCBwcmV2aW91c1BpeGVsKTtcbiAgICBpZiAoZGlzdGFuY2UgPiB3aW5kb3cubWFnaWMpIHtcbiAgICAgIHNldEltYWdlRGF0YVBpeGVsKGksIHByb2Nlc3NpbmdJbWFnZURhdGEsIDAsIDAsIDAsIDI1NSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc2V0SW1hZ2VEYXRhUGl4ZWwoaSwgcHJvY2Vzc2luZ0ltYWdlRGF0YSwgMjU1LCAyNTUsIDI1NSwgMjU1KTtcbiAgICB9XG4gIH1cblxuICBwcm9jZXNzaW5nLnB1dEltYWdlRGF0YShwcm9jZXNzaW5nSW1hZ2VEYXRhLCAwLCAwKTtcbn1cblxuZnVuY3Rpb24gc2V0SW1hZ2VEYXRhUGl4ZWwoaW5kZXgsIGltYWdlRGF0YSwgciwgZywgYiwgYSkge1xuICBpbWFnZURhdGEuZGF0YVtpbmRleF0gPSByO1xuICBpbWFnZURhdGEuZGF0YVtpbmRleCArIDFdID0gZztcbiAgaW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAyXSA9IGI7XG4gIGltYWdlRGF0YS5kYXRhW2luZGV4ICsgM10gPSBhO1xufVxuXG4vLyByZXR1cm5zIHZhbHVlIGZyb20gMCAtIDFcbmZ1bmN0aW9uIGNvbG9yRGlzdGFuY2UocDEsIHAyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocDEuciAtIHAyLnIsIDIpICsgTWF0aC5wb3cocDEuZyAtIHAyLmcsIDIpICsgTWF0aC5wb3cocDEuYiAtIHAyLmIsIDIpKSAvIDQ0MS42NzM7XG59XG5cbmZ1bmN0aW9uIGluZGV4VG9Db29yZGluYXRlKGluZGV4LCB3aWR0aCkge1xuICBsZXQgeCA9IGluZGV4ICUgd2lkdGg7XG4gIGxldCB5ID0gKGluZGV4IC0geCkgLyB3aWR0aDtcbiAgcmV0dXJuIHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfVxufVxuXG5mdW5jdGlvbiBjb29yZGluYXRlVG9JbmRleCh4LCB5LCB3aWR0aCkge1xuICByZXR1cm4gKHkgKiB3aWR0aCkgKyB4O1xufVxuIl19
