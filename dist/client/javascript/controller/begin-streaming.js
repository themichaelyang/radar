'use strict';

function beginStreaming(channel) {

  var constraints = {
    audio: false,
    video: {
      facingMode: 'user',
      width: {
        exact: 48
        // exact: 240
      },
      height: {
        exact: 35
        // exact: 135
      }
    }
  };

  var config = {
    fps: 15 // should not exceed fps of camera
    // will flash if so
  };

  startVideo(constraints).then(function (video) {
    var videoContext = createContextFromVideo(video);
    var previousContext = createContextFromVideo(video);
    var processingContext = createContextFromVideo(video);

    var processingCanvas = processingContext.canvas;
    video.className += 'video';
    processingCanvas.className += 'video';

    document.body.appendChild(video);
    document.body.appendChild(processingContext.canvas);

    resetContexts();

    window.setInterval(function () {
      // videoContext holds the current video frame
      // processingContext holds the previous video frame
      // figure out a way to skip the first frame?

      resetContexts();
      run(videoContext, previousContext, processingContext);
    }, 1000 / config.fps);

    // clean up this mess
    var circleRadius = videoContext.canvas.width / 25;
    var oldCoords = { x: 0, y: 0 };
    var width = videoContext.canvas.width;
    var height = videoContext.canvas.height;
    processingContext.fillStyle = "green";

    function run(currentContext, previousContext, processingContext) {
      frameDifference(currentContext, previousContext, processingContext);
      var coords = getCoordinates(processingContext, 'x', 'y');

      if (coords) {
        processingContext.beginPath();
        processingContext.arc(coords.x * width, coords.y * height, circleRadius, 0, 2 * Math.PI);
        processingContext.fill();

        oldCoords = coords;
      } else {
        processingContext.fillStyle = "red";
        processingContext.beginPath();
        processingContext.arc(oldCoords.x * width, oldCoords.y * height, circleRadius, 0, 2 * Math.PI);
        processingContext.fill();
        processingContext.fillStyle = "green";
      }

      channel.send(JSON.stringify(coords));
    }

    function resetContexts() {
      previousContext.drawImage(videoContext.canvas, 0, 0); // copy old frame
      copyVideoToContext(videoContext, video); // update current frame
      // processingContext.clearRect(0, 0, processingCanvas.width, processingCanvas.height); // clear processing context
      // careful: processing context might flicker
    }
  });

  function createContextFromVideo(video) {
    var canvas = document.createElement('canvas');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    return canvas.getContext('2d');
  }

  function copyVideoToContext(context, video) {
    context.drawImage(video, 0, 0, context.canvas.width, context.canvas.height);
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImphdmFzY3JpcHQvY29udHJvbGxlci9iZWdpbi1zdHJlYW1pbmcuanMiXSwibmFtZXMiOlsiYmVnaW5TdHJlYW1pbmciLCJjaGFubmVsIiwiY29uc3RyYWludHMiLCJhdWRpbyIsInZpZGVvIiwiZmFjaW5nTW9kZSIsIndpZHRoIiwiZXhhY3QiLCJoZWlnaHQiLCJjb25maWciLCJmcHMiLCJzdGFydFZpZGVvIiwidGhlbiIsInZpZGVvQ29udGV4dCIsImNyZWF0ZUNvbnRleHRGcm9tVmlkZW8iLCJwcmV2aW91c0NvbnRleHQiLCJwcm9jZXNzaW5nQ29udGV4dCIsInByb2Nlc3NpbmdDYW52YXMiLCJjYW52YXMiLCJjbGFzc05hbWUiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInJlc2V0Q29udGV4dHMiLCJ3aW5kb3ciLCJzZXRJbnRlcnZhbCIsInJ1biIsImNpcmNsZVJhZGl1cyIsIm9sZENvb3JkcyIsIngiLCJ5IiwiZmlsbFN0eWxlIiwiY3VycmVudENvbnRleHQiLCJmcmFtZURpZmZlcmVuY2UiLCJjb29yZHMiLCJnZXRDb29yZGluYXRlcyIsImJlZ2luUGF0aCIsImFyYyIsIk1hdGgiLCJQSSIsImZpbGwiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsImRyYXdJbWFnZSIsImNvcHlWaWRlb1RvQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJnZXRDb250ZXh0IiwiY29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxjQUFULENBQXdCQyxPQUF4QixFQUFpQzs7QUFFL0IsTUFBSUMsY0FBYztBQUNoQkMsV0FBTyxLQURTO0FBRWhCQyxXQUFPO0FBQ0xDLGtCQUFZLE1BRFA7QUFFTEMsYUFBTztBQUNMQyxlQUFPO0FBQ1A7QUFGSyxPQUZGO0FBTUxDLGNBQVE7QUFDTkQsZUFBTztBQUNQO0FBRk07QUFOSDtBQUZTLEdBQWxCOztBQWVBLE1BQUlFLFNBQVM7QUFDWEMsU0FBSyxF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Q0EsV0FBTzlCLE9BQU8rQixVQUFQLENBQWtCLElBQWxCLENBQVA7QUFDRDs7QUFFRCxXQUFTSixrQkFBVCxDQUE0QkssT0FBNUIsRUFBcUM5QyxLQUFyQyxFQUE0QztBQUMxQzhDLFlBQVFOLFNBQVIsQ0FBa0J4QyxLQUFsQixFQUF5QixDQUF6QixFQUE0QixDQUE1QixFQUErQjhDLFFBQVFoQyxNQUFSLENBQWVaLEtBQTlDLEVBQXFENEMsUUFBUWhDLE1BQVIsQ0FBZVYsTUFBcEU7QUFDRDtBQUNGIiwiZmlsZSI6ImphdmFzY3JpcHQvY29udHJvbGxlci9iZWdpbi1zdHJlYW1pbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBiZWdpblN0cmVhbWluZyhjaGFubmVsKSB7XG5cbiAgbGV0IGNvbnN0cmFpbnRzID0ge1xuICAgIGF1ZGlvOiBmYWxzZSxcbiAgICB2aWRlbzoge1xuICAgICAgZmFjaW5nTW9kZTogJ3VzZXInLFxuICAgICAgd2lkdGg6IHtcbiAgICAgICAgZXhhY3Q6IDQ4XG4gICAgICAgIC8vIGV4YWN0OiAyNDBcbiAgICAgIH0sXG4gICAgICBoZWlnaHQ6IHtcbiAgICAgICAgZXhhY3Q6IDM1XG4gICAgICAgIC8vIGV4YWN0OiAxMzVcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgbGV0IGNvbmZpZyA9IHtcbiAgICBmcHM6IDE1IC8vIHNob3VsZCBub3QgZXhjZWVkIGZwcyBvZiBjYW1lcmFcbiAgICAvLyB3aWxsIGZsYXNoIGlmIHNvXG4gIH07XG5cbiAgc3RhcnRWaWRlbyhjb25zdHJhaW50cykudGhlbigodmlkZW8pID0+IHtcbiAgICBsZXQgdmlkZW9Db250ZXh0ID0gY3JlYXRlQ29udGV4dEZyb21WaWRlbyh2aWRlbyk7XG4gICAgbGV0IHByZXZpb3VzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHRGcm9tVmlkZW8odmlkZW8pO1xuICAgIGxldCBwcm9jZXNzaW5nQ29udGV4dCA9IGNyZWF0ZUNvbnRleHRGcm9tVmlkZW8odmlkZW8pO1xuXG4gICAgbGV0IHByb2Nlc3NpbmdDYW52YXMgPSBwcm9jZXNzaW5nQ29udGV4dC5jYW52YXM7XG4gICAgdmlkZW8uY2xhc3NOYW1lICs9ICd2aWRlbyc7XG4gICAgcHJvY2Vzc2luZ0NhbnZhcy5jbGFzc05hbWUgKz0gJ3ZpZGVvJztcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodmlkZW8pO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocHJvY2Vzc2luZ0NvbnRleHQuY2FudmFzKTtcblxuICAgIHJlc2V0Q29udGV4dHMoKTtcblxuICAgIHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAvLyB2aWRlb0NvbnRleHQgaG9sZHMgdGhlIGN1cnJlbnQgdmlkZW8gZnJhbWVcbiAgICAgIC8vIHByb2Nlc3NpbmdDb250ZXh0IGhvbGRzIHRoZSBwcmV2aW91cyB2aWRlbyBmcmFtZVxuICAgICAgLy8gZmlndXJlIG91dCBhIHdheSB0byBza2lwIHRoZSBmaXJzdCBmcmFtZT9cblxuICAgICAgcmVzZXRDb250ZXh0cygpO1xuICAgICAgcnVuKHZpZGVvQ29udGV4dCwgcHJldmlvdXNDb250ZXh0LCBwcm9jZXNzaW5nQ29udGV4dCk7XG5cbiAgICB9LCAxMDAwIC8gY29uZmlnLmZwcyk7XG5cbiAgICAvLyBjbGVhbiB1cCB0aGlzIG1lc3NcbiAgICBsZXQgY2lyY2xlUmFkaXVzID0gdmlkZW9Db250ZXh0LmNhbnZhcy53aWR0aCAvIDI1O1xuICAgIGxldCBvbGRDb29yZHMgPSB7eDogMCwgeTogMH07XG4gICAgbGV0IHdpZHRoID0gdmlkZW9Db250ZXh0LmNhbnZhcy53aWR0aDtcbiAgICBsZXQgaGVpZ2h0ID0gdmlkZW9Db250ZXh0LmNhbnZhcy5oZWlnaHQ7XG4gICAgcHJvY2Vzc2luZ0NvbnRleHQuZmlsbFN0eWxlID0gXCJncmVlblwiO1xuXG4gICAgZnVuY3Rpb24gcnVuKGN1cnJlbnRDb250ZXh0LCBwcmV2aW91c0NvbnRleHQsIHByb2Nlc3NpbmdDb250ZXh0KSB7XG4gICAgICBmcmFtZURpZmZlcmVuY2UoY3VycmVudENvbnRleHQsIHByZXZpb3VzQ29udGV4dCwgcHJvY2Vzc2luZ0NvbnRleHQpO1xuICAgICAgbGV0IGNvb3JkcyA9IGdldENvb3JkaW5hdGVzKHByb2Nlc3NpbmdDb250ZXh0LCAneCcsICd5Jyk7XG5cbiAgICAgIGlmIChjb29yZHMpIHtcbiAgICAgICAgcHJvY2Vzc2luZ0NvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIHByb2Nlc3NpbmdDb250ZXh0LmFyYyhjb29yZHMueCAqIHdpZHRoLCBjb29yZHMueSAqIGhlaWdodCwgY2lyY2xlUmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgIHByb2Nlc3NpbmdDb250ZXh0LmZpbGwoKTtcblxuICAgICAgICBvbGRDb29yZHMgPSBjb29yZHM7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcHJvY2Vzc2luZ0NvbnRleHQuZmlsbFN0eWxlID0gXCJyZWRcIjtcbiAgICAgICAgcHJvY2Vzc2luZ0NvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIHByb2Nlc3NpbmdDb250ZXh0LmFyYyhvbGRDb29yZHMueCAqIHdpZHRoLCBvbGRDb29yZHMueSAqIGhlaWdodCwgY2lyY2xlUmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgIHByb2Nlc3NpbmdDb250ZXh0LmZpbGwoKTtcbiAgICAgICAgcHJvY2Vzc2luZ0NvbnRleHQuZmlsbFN0eWxlID0gXCJncmVlblwiO1xuICAgICAgfVxuXG4gICAgICBjaGFubmVsLnNlbmQoSlNPTi5zdHJpbmdpZnkoY29vcmRzKSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldENvbnRleHRzKCkge1xuICAgICAgcHJldmlvdXNDb250ZXh0LmRyYXdJbWFnZSh2aWRlb0NvbnRleHQuY2FudmFzLCAwLCAwKTsgLy8gY29weSBvbGQgZnJhbWVcbiAgICAgIGNvcHlWaWRlb1RvQ29udGV4dCh2aWRlb0NvbnRleHQsIHZpZGVvKTsgLy8gdXBkYXRlIGN1cnJlbnQgZnJhbWVcbiAgICAgIC8vIHByb2Nlc3NpbmdDb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBwcm9jZXNzaW5nQ2FudmFzLndpZHRoLCBwcm9jZXNzaW5nQ2FudmFzLmhlaWdodCk7IC8vIGNsZWFyIHByb2Nlc3NpbmcgY29udGV4dFxuICAgICAgLy8gY2FyZWZ1bDogcHJvY2Vzc2luZyBjb250ZXh0IG1pZ2h0IGZsaWNrZXJcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbnRleHRGcm9tVmlkZW8odmlkZW8pIHtcbiAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY2FudmFzLndpZHRoID0gdmlkZW8udmlkZW9XaWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gdmlkZW8udmlkZW9IZWlnaHQ7XG4gICAgcmV0dXJuIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29weVZpZGVvVG9Db250ZXh0KGNvbnRleHQsIHZpZGVvKSB7XG4gICAgY29udGV4dC5kcmF3SW1hZ2UodmlkZW8sIDAsIDAsIGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xuICB9XG59XG4iXX0=
